# Use a custom image with Node.js and Google Chrome pre-installed for testing.
image: node:18-alpine

stages:
  - build
  # - release
  # - deploy

# Global environment variables for the pipeline
variables:
  IMAGE_NAME: docker.io/tebib/osfront:release-$CI_COMMIT_SHORT_SHA
  DOCKER_TLS_CERTDIR: "/certs"
# Cache dependencies for quicker builds
cache:
  key: "${CI_COMMIT_REF_SLUG}-${CACHE_KEY_DEPENDENCIES}"
  paths:
    - node_modules/


# Build the application
build:
  stage: build
  before_script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    # Create and use a Docker context
    - docker context create mycontext
    - docker buildx create --use mycontext

    # Set up Buildx with the specified platforms
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx inspect --bootstrap

    # Build and push the multi-platform image
    - docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_NAME .

    # Push the multi-platform image to Docker Hub
    - docker push $IMAGE_NAME

# Release the application
# release:
#   stage: release
#   script:
#     - echo "Releasing new version..."
#     - npx semantic-release
#   only:
#     changes:
#       - "src/**/*"

